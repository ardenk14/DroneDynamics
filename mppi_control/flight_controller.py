import torch
import sys
sys.path.append('mppi_control')
from mppi import MPPI
import numpy as np

class FlightController(object):
    """
    MPPI-based flight controller
    """

    def __init__(self, model, cost_function, num_samples=200, horizon=5):
        #self.env = env
        self.model = model
        self.target_state = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=np.float32)
        self.target_state = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=np.float32)
        # MPPI Hyperparameters:
        # --- You may need to tune them
        state_dim = None #env.observation_space.shape[0]
        #u_min = torch.tensor([0.0, 100.0, 110.0, 100.0])
        #u_max = torch.tensor([255.0, 158.0, 220.0, 158.0]) #torch.from_numpy(env.action_space.high)
        #u_init = torch.tensor([200.0, 134.0, 165.0, 134.0])

        # TODO: Adjust min, max and noise
        u_min = torch.tensor( [-3.71337407e+07, -2.93290243e+04, -2.06146354e+03,  0.00000000e+00,
                                -1.74074191e+04, -2.93593224e+03, -1.39412416e+02,  0.00000000e+00,
                                -9.24383601e+04, -1.12476691e+04, -3.90883216e+02,  0.00000000e+00,
                                -3.92320064e+04, -6.23634687e+03, -3.54299081e+02,  0.00000000e+00])#[0.0]*20 + [100.0]*20 + [110.0]*20 + [100.0]*20)
        u_max = torch.tensor([2.54744809e+05, 4.85558066e+05, 1.10100957e+03, 2.53313997e+02,
                                1.87669999e+04, 2.47384704e+03, 1.39021623e+02, 1.41506848e+02,
                                7.11118847e+04, 1.31315497e+04, 6.69483349e+02, 1.76000000e+02,
                                4.66153751e+04, 4.72315377e+03, 3.72194535e+02, 1.28000000e+02])#[255.0]*20 + [158.0]*20 + [220.0]*20 + [158.0]*20) #torch.from_numpy(env.action_space.high)
        u_init = torch.tensor([-1.42711576e+04,  2.25775731e+02, -5.06032034e+00,  1.65057043e+02,
                                -1.31935134e+01,  1.59451111e+00,  8.84380319e-03,  1.21965255e+02,
                                5.32417516e+00,  9.93997769e-01, -4.92929712e-01,  1.48202901e+02,
                                -4.50643683e-01, -4.27503971e-01, -4.91271039e-02,  1.21326749e+02])
        cov = np.array([[ 1.06188844e+10, -1.52377202e+08,  5.37771266e+05, -1.84912403e+04,
                                    -6.94835213e+05,  8.49793037e+04, -1.68559247e+03, -8.61055658e+04,
                                    -4.86631024e+05,  1.36194989e+04, -2.24029573e+03, -2.25840365e+05,
                                    -3.86493127e+04,  2.96834099e+03, -2.27039258e+03, -8.09229558e+04],
                                    [-1.52377202e+08,  2.32195539e+06, -1.09830688e+04,  2.25067188e+02,
                                    8.95488028e+04, -1.19478198e+04, 4.18107629e+02,  1.34254513e+03,
                                    7.53795265e+04,  2.32847455e+02, -4.56279015e+02,  3.60220624e+03,
                                    -1.15301961e+04,  1.26914545e+03,  2.34121564e+02,  1.30327103e+03],
                                    [ 5.37771266e+05, -1.09830688e+04,  3.15472371e+02, -5.10406983e+00,
                                    -4.03094851e+03,  5.15317503e+02, -1.23691563e+01, -3.45181641e+01,
                                    -5.40660255e+03,  8.63329464e+01, -3.10545979e+01, -8.26953966e+01,
                                    2.41639634e+03, -4.18896175e+02, -5.06002024e+01, -2.67033495e+01],
                                    [-1.84912403e+04,  2.25067188e+02, -5.10406983e+00,  5.10962429e+01,
                                    6.24338936e+01, -5.82294353e+00,  3.47878057e+00,  1.03441835e+03,
                                    8.64109682e+02, -7.00411250e+01,  2.84084419e+01,  1.28086485e+03,
                                    -3.14235059e+01,  1.80682647e+01, -5.84935843e-01,  1.01500081e+03],
                                    [-6.94835213e+05,  8.95488028e+04, -4.03094851e+03,  6.24338936e+01,
                                    4.06633168e+06, -5.72007779e+05,  1.86657768e+04, -1.05765931e+02,
                                    -3.20423095e+05,  2.71860714e+04,  8.13905863e+02, -1.65947119e+02,
                                    -2.83395083e+04,  4.79512772e+03, -1.73827746e+02, -9.07574089e+01],
                                    [ 8.49793037e+04, -1.19478198e+04,  5.15317503e+02, -5.82294353e+00,
                                    -5.72007779e+05,  8.53365477e+04, -3.07880934e+03,  1.06325530e+01,
                                    5.29602551e+04, -5.45358661e+03, -3.58499573e+01,  2.00346970e+01,
                                    2.75004479e+03, -5.20463070e+02,  2.32973462e+01,  1.07725318e+01],
                                    [-1.68559247e+03,  4.18107629e+02, -1.23691563e+01,  3.47878057e+00,
                                    1.86657768e+04, -3.07880934e+03,  1.49006302e+02, -7.18985385e-01,
                                    -2.15155455e+03,  2.78711756e+02, -4.30518241e+00, -1.26761188e+00,
                                    -2.86016902e+01,  5.28995968e+00,  3.89541565e-01, -1.36950163e-01],
                                    [-8.61055658e+04,  1.34254513e+03, -3.45181641e+01,  1.03441835e+03,
                                    -1.05765931e+02,  1.06325530e+01, -7.18985385e-01,  7.65459304e+02,
                                    8.47928946e+01, -1.83290630e+00, -1.38714935e+00,  9.26892966e+02,
                                    3.33771523e-01, -3.20684914e+00, -3.73756403e-01,  7.57664244e+02],
                                    [-4.86631024e+05,  7.53795265e+04, -5.40660255e+03,  8.64109682e+02,
                                    -3.20423095e+05,  5.29602551e+04, -2.15155455e+03,  8.47928946e+01,
                                    2.98736530e+07, -4.14208778e+06,  1.21400180e+05,  7.51517169e+02,
                                    3.11349663e+04,  1.12026399e+03, -5.67149285e+02, -4.48517082e+01],
                                    [ 1.36194989e+04,  2.32847455e+02,  8.63329464e+01, -7.00411250e+01,
                                    2.71860714e+04, -5.45358661e+03,  2.78711756e+02, -1.83290630e+00,
                                    -4.14208778e+06,  6.33362765e+05, -2.22642829e+04, -2.01610174e+02,
                                    -9.23330651e+03,  6.10356249e+02,  4.89973156e+01,  1.89253552e+01],
                                    [-2.24029573e+03, -4.56279015e+02, -3.10545979e+01,  2.84084419e+01,
                                    8.13905863e+02, -3.58499573e+01, -4.30518241e+00, -1.38714935e+00,
                                    1.21400180e+05, -2.22642829e+04,  1.37011194e+03,  1.48594615e+00,
                                    5.86224824e+02, -6.27799830e+01, -1.31542158e+00, -7.34406673e+00],
                                    [-2.25840365e+05,  3.60220624e+03, -8.26953966e+01,  1.28086485e+03,
                                    -1.65947119e+02, 2.00346970e+01, -1.26761188e+00,  9.26892966e+02,
                                    7.51517169e+02, -2.01610174e+02,  1.48594615e+00,  1.16552103e+03,
                                    -7.55750652e+01,  2.77044747e+00,  2.79794966e+00,  9.20400650e+02],
                                    [-3.86493127e+04, -1.15301961e+04,  2.41639634e+03, -3.14235059e+01,
                                    -2.83395083e+04,  2.75004479e+03, -2.86016902e+01,  3.33771523e-01,
                                    3.11349663e+04, -9.23330651e+03,  5.86224824e+02, -7.55750652e+01,
                                    1.63574553e+06, -2.42864935e+05,  6.86922341e+03,  5.17557448e+01],
                                    [ 2.96834099e+03,  1.26914545e+03, -4.18896175e+02,  1.80682647e+01,
                                    4.79512772e+03, -5.20463070e+02,  5.28995968e+00, -3.20684914e+00,
                                    1.12026399e+03,  6.10356249e+02, -6.27799830e+01,  2.77044747e+00,
                                    -2.42864935e+05,  3.95596750e+04, -1.40141575e+03, -2.38388693e+01],
                                    [-2.27039258e+03,  2.34121564e+02, -5.06002024e+01, -5.84935843e-01,
                                    -1.73827746e+02,  2.32973462e+01,  3.89541565e-01, -3.73756403e-01,
                                    -5.67149285e+02,  4.89973156e+01, -1.31542158e+00,  2.79794966e+00,
                                    6.86922341e+03, -1.40141575e+03,  1.09327307e+02,  9.45920736e-01],
                                    [-8.09229558e+04,  1.30327103e+03, -2.67033495e+01,  1.01500081e+03,
                                    -9.07574089e+01,  1.07725318e+01, -1.36950163e-01,  7.57664244e+02,
                                    -4.48517082e+01,  1.89253552e+01, -7.34406673e+00,  9.20400650e+02,
                                    5.17557448e+01, -2.38388693e+01, 9.45920736e-01,  7.60429594e+02]])#120 * torch.eye(4*20)
        thrust_cov = torch.tensor(cov[:4, :4])
        roll_cov = torch.tensor(cov[4:8, 4:8])
        pitch_cov = torch.tensor(cov[8:12, 8:12])
        yaw_cov = torch.tensor(cov[12:, 12:])
        cov_new = torch.eye(16)
        cov_new[:4, :4] = thrust_cov
        cov_new[4:8, 4:8] = roll_cov
        cov_new[8:12, 8:12] = pitch_cov
        cov_new[12:, 12:] = yaw_cov
        # Adjust variances
        cov_new[4, 4] *= 15
        cov_new[8, 8] *= 15
        cov_new[12, 12] *= 15
        cov_new[-1, -1] *= 15
        noise_sigma = cov_new
        lambda_value = 0.01
        
        self.mppi = MPPI(self._compute_dynamics,
                         cost_function,
                         nx=state_dim,
                         num_samples=num_samples,
                         horizon=horizon,
                         noise_sigma=noise_sigma,
                         lambda_=lambda_value,
                         u_min=u_min,
                         u_max=u_max,
                         u_init=u_init)

    def _compute_dynamics(self, state, action):
        """
        Compute next_state using the dynamics model self.model and the provided state and action tensors
        :param state: torch tensor of shape (B, state_size)
        :param action: torch tensor of shape (B, action_size)
        :return: next_state: torch tensor of shape (B, state_size) containing the predicted states from the learned model.
        """
        next_state = self.model(state, action)
        return next_state

    def control(self, state):
        """
        Query MPPI and return the optimal action given the current state <state>
        :param state: numpy array of shape (state_size,) representing current state
        :return: action: numpy array of shape (action_size,) representing optimal action to be sent to the robot.
        """
        # Convert numpy array to a tensor
        state_tensor = torch.from_numpy(state)
        # Get mppi command
        action_tensor = self.mppi.command(state_tensor)
        # Convert returned action from a tensor to a numpy array
        action = action_tensor.detach().numpy()
        return action